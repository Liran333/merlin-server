definitions:
  app.SpaceMetaDTO:
    properties:
      hardware:
        type: string
      id:
        type: string
      name:
        type: string
      owner:
        type: string
      sdk:
        type: string
    type: object
  controller.ResponseData:
    properties:
      code:
        type: string
      data: {}
      msg:
        type: string
    type: object
  controller.bindEmailRequest:
    properties:
      code:
        type: string
      email:
        type: string
    required:
    - code
    - email
    type: object
  controller.logoutInfo:
    properties:
      id_token:
        type: string
    type: object
  controller.reqToCheckPermission:
    properties:
      name:
        type: string
      owner:
        type: string
      user:
        type: string
    type: object
  controller.reqToCreateModel:
    properties:
      desc:
        type: string
      fullname:
        type: string
      init_readme:
        type: boolean
      license:
        type: string
      name:
        type: string
      owner:
        type: string
      visibility:
        type: string
    type: object
  controller.reqToLogin:
    properties:
      code:
        type: string
      redirect_uri:
        type: string
    type: object
  controller.sendEmailRequest:
    properties:
      capt:
        type: string
      email:
        type: string
    required:
    - capt
    - email
    type: object
  controller.tokenCreateRequest:
    properties:
      name:
        type: string
      perm:
        type: string
    required:
    - name
    - perm
    type: object
  controller.tokenVerifyRequest:
    properties:
      action:
        type: string
      token:
        type: string
    required:
    - action
    - token
    type: object
  controller.userBasicInfoUpdateRequest:
    properties:
      avatar_id:
        type: string
      description:
        type: string
      fullname:
        type: string
      revoke_delete:
        type: boolean
    type: object
  github_com_openmerlin_merlin-server_session_app.UserDTO:
    properties:
      account:
        type: string
      allow_request:
        type: boolean
      avatar_id:
        type: string
      created_at:
        type: integer
      default_role:
        type: string
      description:
        type: string
      email:
        type: string
      fullname:
        type: string
      id:
        type: string
      owner:
        type: string
      owner_id:
        type: string
      phone:
        type: string
      request_delete:
        type: boolean
      request_delete_at:
        type: integer
      type:
        type: integer
      updated_at:
        type: integer
      website:
        type: string
    type: object
info:
  contact: {}
paths:
  /v1/coderepo/permission/read:
    post:
      consumes:
      - application/json
      description: check if can read repo's sub-resource not the repo itsself
      parameters:
      - description: body of request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.reqToCheckPermission'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.ResponseData'
      security:
      - Internal: []
      summary: Read
      tags:
      - Permission
  /v1/coderepo/permission/update:
    post:
      consumes:
      - application/json
      description: check if can create/update/delete repo's sub-resource not the repo
        itsself
      parameters:
      - description: body of request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.reqToCheckPermission'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.ResponseData'
      security:
      - Internal: []
      summary: Update
      tags:
      - Permission
  /v1/model/{id}:
    get:
      consumes:
      - application/json
      description: get model info by id
      parameters:
      - description: id of model
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.ResponseData'
      security:
      - Internal: []
      summary: GetById
      tags:
      - ModelInternal
  /v1/model/{id}/label:
    put:
      consumes:
      - application/json
      description: reset label of model
      parameters:
      - description: id of model
        in: path
        name: id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.reqToCreateModel'
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/controller.ResponseData'
      security:
      - Internal: []
      summary: ResetLabel
      tags:
      - ModelInternal
  /v1/session:
    post:
      consumes:
      - application/json
      description: login
      parameters:
      - description: body of login
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.reqToLogin'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/github_com_openmerlin_merlin-server_session_app.UserDTO'
      summary: Login
      tags:
      - Session
    put:
      consumes:
      - application/json
      description: logout
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/controller.logoutInfo'
      summary: Logout
      tags:
      - Session
  /v1/session/check:
    put:
      consumes:
      - application/json
      description: check and refresh session
      responses:
        "202":
          description: Accepted
      summary: CheckAndRefresh
      tags:
      - Session
  /v1/session/clear:
    delete:
      consumes:
      - application/json
      description: Clear session when it expired
      responses:
        "204":
          description: No Content
      summary: Clear
      tags:
      - Session
  /v1/space/{id}:
    get:
      consumes:
      - application/json
      description: get space
      parameters:
      - description: id of space
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.SpaceMetaDTO'
      summary: Get
      tags:
      - SpaceInternal
  /v1/user:
    delete:
      consumes:
      - application/json
      description: delete
      responses:
        "204":
          description: No Content
      security:
      - Bearer: []
      summary: Request Delete User info
      tags:
      - User
    get:
      consumes:
      - application/json
      description: get current sign-in user info
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.ResponseData'
      security:
      - Bearer: []
      summary: Get current user info
      tags:
      - User
    put:
      consumes:
      - application/json
      description: update user basic info
      parameters:
      - description: body of updating user
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.userBasicInfoUpdateRequest'
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/controller.ResponseData'
      security:
      - Bearer: []
      summary: Update
      tags:
      - User
  /v1/user/{name}/platform:
    get:
      consumes:
      - application/json
      description: Get platform user info
      parameters:
      - description: name of the user
        in: path
        name: name
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.ResponseData'
      security:
      - Internal: []
      summary: Get platform user info
      tags:
      - User
  /v1/user/email/bind:
    post:
      consumes:
      - application/json
      description: bind user's email
      parameters:
      - description: body of bind email info
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.bindEmailRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.ResponseData'
      security:
      - Bearer: []
      summary: Bind User Email
      tags:
      - User
  /v1/user/email/send:
    post:
      consumes:
      - application/json
      description: send user's email verify code
      parameters:
      - description: body of bind email info
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.sendEmailRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.ResponseData'
      security:
      - Bearer: []
      summary: Send User Email Verify code
      tags:
      - User
  /v1/user/privacy:
    put:
      consumes:
      - application/json
      description: revoke
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/controller.ResponseData'
      security:
      - Bearer: []
      summary: PrivacyRevoke
      tags:
      - User
  /v1/user/token:
    get:
      consumes:
      - application/json
      description: list all platform tokens of user
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.ResponseData'
      security:
      - Bearer: []
      summary: GetTokenInfo
      tags:
      - User
    post:
      consumes:
      - application/json
      description: create a new platform token of user
      parameters:
      - description: body of create token
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.tokenCreateRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.ResponseData'
      security:
      - Bearer: []
      summary: CreatePlatformToken
      tags:
      - User
  /v1/user/token/{name}:
    delete:
      consumes:
      - application/json
      description: delete a new platform token of user
      parameters:
      - description: token name
        in: path
        name: name
        required: true
        type: string
      responses:
        "204":
          description: No Content
      security:
      - Bearer: []
      summary: DeletePlatformToken
      tags:
      - User
  /v1/user/token/verify:
    post:
      consumes:
      - application/json
      description: verify a platform token of user
      parameters:
      - description: body of token
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.tokenVerifyRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.ResponseData'
        "400":
          description: Bad Request
          schema:
            type: token
        "401":
          description: Unauthorized
          schema:
            type: token
        "403":
          description: Forbidden
          schema:
            type: token
        "500":
          description: Internal Server Error
          schema:
            type: internal
      security:
      - Internal: []
      summary: Verify token
      tags:
      - User
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and api Bearer.
    in: header
    name: Authorization
    type: apiKey
  Internal:
    description: Type "Internal" followed by a space and internal token.
    in: header
    name: TOKEN
    type: apiKey
swagger: "2.0"
