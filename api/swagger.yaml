definitions:
  app.ApproveDTO:
    properties:
      expires_at:
        type: integer
      org_name:
        type: string
      role:
        type: string
      user_name:
        type: string
    type: object
  app.MemberDTO:
    properties:
      org_full_name:
        type: string
      org_name:
        type: string
      role:
        type: string
      user_name:
        type: string
    type: object
  app.ModelsDTO:
    properties:
      models:
        items:
          $ref: '#/definitions/repository.ModelSummary'
        type: array
      total:
        type: integer
    type: object
  app.OrganizationDTO:
    properties:
      approves:
        items:
          $ref: '#/definitions/app.ApproveDTO'
        type: array
      avatar_id:
        type: string
      created_at:
        type: integer
      description:
        type: string
      full_name:
        type: string
      id:
        type: string
      name:
        type: string
      owner:
        type: string
      platform_id:
        type: string
      website:
        type: string
    type: object
  app.TokenDTO:
    properties:
      account:
        type: string
      created_at:
        type: integer
      expired:
        type: integer
      name:
        type: string
      permission:
        type: string
      token:
        type: string
    type: object
  app.UserDTO:
    properties:
      account:
        type: string
      avatar_id:
        type: string
      bio:
        type: string
      email:
        type: string
      id:
        type: string
    type: object
  controller.OrgInviteMemberRequest:
    properties:
      role:
        type: string
      user:
        type: string
    required:
    - role
    - user
    type: object
  controller.OrgRevokeInviteRequest:
    properties:
      user:
        type: string
    required:
    - user
    type: object
  controller.ResponseData:
    properties:
      code:
        type: string
      data: {}
      msg:
        type: string
    type: object
  controller.modelDetail:
    properties:
      avatar_id:
        type: string
      created_at:
        type: string
      desc:
        type: string
      download_count:
        type: integer
      fullname:
        type: string
      id:
        type: string
      labels:
        items:
          type: string
        type: array
      license:
        type: string
      like_count:
        type: integer
      liked:
        type: boolean
      name:
        type: string
      owner:
        type: string
      updated_at:
        type: string
      visibility:
        type: string
    type: object
  controller.modelsInfo:
    properties:
      avatar_id:
        type: string
      models:
        items:
          $ref: '#/definitions/repository.ModelSummary'
        type: array
      owner:
        type: string
      total:
        type: integer
    type: object
  controller.orgBasicInfoUpdateRequest:
    properties:
      avatar_id:
        type: string
      description:
        type: string
      full_name:
        type: string
      website:
        type: string
    type: object
  controller.orgCreateRequest:
    properties:
      avatar_id:
        type: string
      description:
        type: string
      full_name:
        type: string
      name:
        type: string
      website:
        type: string
    required:
    - name
    type: object
  controller.orgMemberAddRequest:
    properties:
      user:
        type: string
    required:
    - user
    type: object
  controller.orgMemberRemoveRequest:
    properties:
      role:
        type: string
      user:
        type: string
    required:
    - role
    - user
    type: object
  controller.reqToCreateModel:
    properties:
      desc:
        type: string
      fullname:
        type: string
      license:
        type: string
      name:
        type: string
      owner:
        type: string
      visibility:
        type: string
    type: object
  controller.reqToUpdateModel:
    properties:
      desc:
        type: string
      fullname:
        type: string
      name:
        type: string
      visibility:
        type: string
    type: object
  controller.tokenCreateRequest:
    properties:
      name:
        type: string
      perm:
        type: string
    required:
    - name
    - perm
    type: object
  controller.userBasicInfoUpdateRequest:
    properties:
      avatar_id:
        type: string
      bio:
        type: string
      email:
        type: string
    type: object
  controller.userDetail:
    properties:
      account:
        type: string
      avatar_id:
        type: string
      bio:
        type: string
      email:
        type: string
      id:
        type: string
    type: object
  repository.ModelSummary:
    properties:
      desc:
        type: string
      download_count:
        type: integer
      fullname:
        type: string
      id:
        type: string
      like_count:
        type: integer
      name:
        type: string
      owner:
        type: string
      task_label:
        type: string
      updated_at:
        type: string
    type: object
  session.SessionDTO:
    properties:
      email:
        type: string
      info:
        type: string
      user_id:
        type: string
    type: object
info:
  contact: {}
paths:
  /v1/login:
    get:
      consumes:
      - application/json
      description: callback of authentication by authing
      parameters:
      - description: authing code
        in: query
        name: code
        required: true
        type: string
      - description: redirect uri
        in: query
        name: redirect_uri
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.UserDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
        "501":
          description: Not Implemented
          schema:
            type: duplicate_creating
      tags:
      - Login
  /v1/logout:
    get:
      consumes:
      - application/json
      description: get info of login
      parameters:
      - description: account
        in: path
        name: account
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/session.SessionDTO'
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "401":
          description: Unauthorized
          schema:
            type: not_allowed
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - Login
  /v1/model:
    get:
      consumes:
      - application/json
      description: list global public model
      parameters:
      - description: name of model
        in: query
        name: name
        type: string
      - description: whether to calculate the total
        in: query
        name: count
        type: boolean
      - description: labels, separate multiple each ones with commas
        in: query
        name: labels
        type: string
      - description: 'sort types: most_likes, alphabetical, most_downloads, recently_updated,
          recently_created'
        in: query
        name: sort_by
        type: string
      - description: page num which starts from 1
        in: query
        name: page_num
        type: integer
      - description: count per page
        in: query
        name: count_per_page
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.ModelsDTO'
      summary: ListGlobal
      tags:
      - Model
    post:
      consumes:
      - application/json
      description: create model
      parameters:
      - description: body of creating model
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.reqToCreateModel'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.ResponseData'
      summary: Create
      tags:
      - Model
  /v1/model/{id}:
    delete:
      consumes:
      - application/json
      description: delete model
      parameters:
      - description: id of model
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: ""
      summary: Delete
      tags:
      - Model
    put:
      consumes:
      - application/json
      description: update model
      parameters:
      - description: id of model
        in: path
        name: id
        required: true
        type: string
      - description: body of updating model
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.reqToUpdateModel'
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/controller.ResponseData'
      summary: Update
      tags:
      - Model
  /v1/model/{owner}:
    get:
      consumes:
      - application/json
      description: list model
      parameters:
      - description: owner of model
        in: path
        name: owner
        required: true
        type: string
      - description: name of model
        in: query
        name: name
        type: string
      - description: whether to calculate the total
        in: query
        name: count
        type: boolean
      - description: 'sort types: most_likes, alphabetical, most_downloads, recently_updated,
          recently_created'
        in: query
        name: sort_by
        type: string
      - description: page num which starts from 1
        in: query
        name: page_num
        type: integer
      - description: count per page
        in: query
        name: count_per_page
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.modelsInfo'
      summary: List
      tags:
      - Model
  /v1/model/{owner}/{name}:
    get:
      consumes:
      - application/json
      description: get model
      parameters:
      - description: owner of model
        in: path
        name: owner
        required: true
        type: string
      - description: name of model
        in: path
        name: name
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.modelDetail'
      summary: Get
      tags:
      - Model
  /v1/name:
    head:
      consumes:
      - application/json
      description: Check the name is available
      parameters:
      - description: name
        in: query
        name: name
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: name
        "409":
          description: Conflict
          schema:
            type: name
      summary: Check the name is available
      tags:
      - Name
  /v1/organization:
    get:
      consumes:
      - application/json
      description: get organization info
      parameters:
      - description: name
        in: path
        name: name
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/app.OrganizationDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "401":
          description: Unauthorized
          schema:
            type: resource_not_exists
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Get all organization of the user
      tags:
      - Organization
    post:
      consumes:
      - application/json
      description: create a new organization
      parameters:
      - description: body of new organization
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.orgCreateRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/app.OrganizationDTO'
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "401":
          description: Unauthorized
          schema:
            type: not_allowed
        "404":
          description: Not Found
          schema:
            type: not_found
      summary: Create organization
      tags:
      - Organization
  /v1/organization/{name}:
    delete:
      consumes:
      - application/json
      description: delete a organization
      parameters:
      - description: name
        in: path
        name: name
        required: true
        type: string
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "401":
          description: Unauthorized
          schema:
            type: not_allowed
        "403":
          description: Forbidden
          schema:
            type: permission
      summary: Delete organization
      tags:
      - Organization
    get:
      consumes:
      - application/json
      description: get organization info
      parameters:
      - description: name
        in: path
        name: name
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.OrganizationDTO'
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "401":
          description: Unauthorized
          schema:
            type: resource_not_exists
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Get one organization info
      tags:
      - Organization
    put:
      consumes:
      - application/json
      description: update org basic info
      parameters:
      - description: name
        in: path
        name: name
        required: true
        type: string
      - description: body of new organization
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.orgBasicInfoUpdateRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/app.OrganizationDTO'
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "401":
          description: Unauthorized
          schema:
            type: resource_not_exists
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Update org basic info
      tags:
      - Organization
  /v1/organization/{name}/invite:
    delete:
      consumes:
      - application/json
      description: Revoke invitation of the organization
      parameters:
      - description: body of the invitation
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.OrgRevokeInviteRequest'
      - description: organization name
        in: path
        name: name
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/app.ApproveDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "401":
          description: Unauthorized
          schema:
            type: not_allowed
      summary: Revoke invitation of the organization
      tags:
      - Organization
    get:
      consumes:
      - application/json
      description: List invitation of the organization
      parameters:
      - description: organization name
        in: path
        name: name
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/app.ApproveDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "401":
          description: Unauthorized
          schema:
            type: not_allowed
      summary: List invitation of the organization
      tags:
      - Organization
    post:
      consumes:
      - application/json
      description: Send invitation to a user to join the organization
      parameters:
      - description: body of the invitation
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.OrgInviteMemberRequest'
      - description: name
        in: path
        name: name
        required: true
        type: string
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/app.OrganizationDTO'
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "401":
          description: Unauthorized
          schema:
            type: not_allowed
      summary: Invite a user to be a member of the organization
      tags:
      - Organization
  /v1/organization/{name}/member:
    delete:
      consumes:
      - application/json
      description: Remove a member from a organization
      parameters:
      - description: body of the removed member
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.orgMemberRemoveRequest'
      - description: name
        in: path
        name: name
        required: true
        type: string
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "401":
          description: Unauthorized
          schema:
            type: not_allowed
      summary: Remove organization members
      tags:
      - Organization
    get:
      consumes:
      - application/json
      description: list organization members
      parameters:
      - description: name
        in: path
        name: name
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/app.MemberDTO'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: not_allowed
        "403":
          description: Forbidden
          schema:
            type: permission
      summary: List organization members
      tags:
      - Organization
    post:
      consumes:
      - application/json
      description: Add a member to the organization, the user must be on invite list
        before adding
      parameters:
      - description: body of new member
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.orgMemberAddRequest'
      - description: name
        in: path
        name: name
        required: true
        type: string
      responses:
        "201":
          description: ""
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "401":
          description: Unauthorized
          schema:
            type: not_allowed
      summary: Add organization members
      tags:
      - Organization
  /v1/user:
    get:
      consumes:
      - application/json
      description: get user
      parameters:
      - description: account
        in: query
        name: account
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.userDetail'
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "401":
          description: Unauthorized
          schema:
            type: resource_not_exists
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Get a user info
      tags:
      - User
    put:
      consumes:
      - application/json
      description: update user basic info
      parameters:
      - description: body of updating user
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.userBasicInfoUpdateRequest'
      produces:
      - application/json
      responses: {}
      summary: Update user basic info
      tags:
      - User
  /v1/user/check_email:
    get:
      consumes:
      - application/json
      description: check user email
      responses:
        "200":
          description: ""
        "400":
          description: Bad Request
          schema:
            type: "no"
      tags:
      - User
  /v1/user/token:
    get:
      consumes:
      - application/json
      description: list all platform tokens of user
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/app.TokenDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "401":
          description: Unauthorized
          schema:
            type: not_allowed
      tags:
      - User
    post:
      consumes:
      - application/json
      description: create a new platform token of user
      parameters:
      - description: body of create token
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.tokenCreateRequest'
      responses:
        "201":
          description: Created
          schema:
            type: created
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "401":
          description: Unauthorized
          schema:
            type: not_allowed
      summary: Create a user token
      tags:
      - User
  /v1/user/token/{name}:
    delete:
      consumes:
      - application/json
      description: delete a new platform token of user
      parameters:
      - description: name
        in: query
        name: name
        type: string
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "401":
          description: Unauthorized
          schema:
            type: not_allowed
        "404":
          description: Not Found
          schema:
            type: not_found
      summary: Delete a user token
      tags:
      - User
swagger: "2.0"
